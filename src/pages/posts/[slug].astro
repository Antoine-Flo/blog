---
import type { GetStaticPaths } from 'astro'
import Layout from '@layouts/Layout.astro'
import { dateString, getSortedPosts, url } from '@utils'
import Pagination from '@components/Pagination.astro'
import PostPreview from '@components/PostPreview.astro'
import DividerText from '@components/DividerText.astro'
import { getCollection } from 'astro:content'
import PostAddendum from '@components/PostAddendum.astro'
import { getImage, Image } from "astro:assets";

export const getStaticPaths = (async () => {
  const posts = await getSortedPosts()
  return posts.map((post, index) => {
    const validPrev = index > 0
    const validNext = index < posts.length - 1
    const prev = validPrev ? posts[index - 1] : undefined
    const next = validNext ? posts[index + 1] : undefined
    return {
      params: { slug: post.id },
      props: { post, prev, next },
    }
  })
}) satisfies GetStaticPaths

const { post, prev, next } = Astro.props
const postData = post.data
const addendum = await getCollection('addendum')
const addendumHtml =
  addendum.length > 0 && addendum[0].body ? addendum[0].rendered?.html : undefined
// const coverImage = postData.coverImage ? { src: postData.coverImage.src.src, alt: postData.coverImage.alt } : undefined
const coverImage = postData.coverImage ? (await getImage(postData.coverImage)).src : undefined
---

<Layout title={postData.title} description={postData.description} tags={postData.tags} coverImage={coverImage}>
  <article class="max-w-full py-7.5" data-pagefind-body>
    {
      postData.coverImage && coverImage && (
        <img
          src={coverImage}
          alt={postData.coverImage.alt}
          class="w-full rounded-xl mb-5"
        />
      )
    }
    <h1 class="mb-3 text-2xl text-[var(--theme-h1)] font-semibold">
      # {postData.title}
    </h1>
    <div class="text-foreground/80 mb-2.5">
      <time>{dateString(postData.published)}</time>
      {
        postData.author && (
          <span class="before:content-['::'] before:inline-block before:mx-0.5">
            {postData.author}
          </span>
        )
      }
    </div>
    {
      postData.tags && (
        <div class="text-accent mb-5">
          {postData.tags.map((tag) => (
            <a class="underline mr-4 inline-block" href={`/tags/${tag}`}>
              #{tag}
            </a>
          ))}
        </div>
      )
    }
    <div class="my-5 prose" set:html={post.rendered?.html} />
  </article>
  {
    addendumHtml && (
      <PostAddendum textHtml={addendumHtml} avatarFilename={addendum[0].data.avatar} />
    )
  }
  <DividerText text="More Posts" />
  {prev && <PostPreview post={prev} />}
  {next && <PostPreview post={next} />}
</Layout>
