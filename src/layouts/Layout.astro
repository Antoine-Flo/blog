---
import '/src/styles/global.css'
import Header from '@components/Header.astro'
import Footer from '@components/Footer.astro'
import LightDarkAutoThemeLoader from '@components/LightDarkAutoThemeLoader.astro'
import SelectThemeLoader from '@components/SelectThemeLoader.astro'
import { loadShikiTheme } from 'astro-expressive-code'
import siteConfig from '../site.config'
import { resolveElementStyles } from '@utils'

interface Props {
  title?: string
}

const { title } = Astro.props
const pageTitle = title ? `${title} - ${siteConfig.title}` : siteConfig.title
const baseCssVars: { [key: string]: string } = {
  'theme-font': siteConfig.font,
  'ec-frm-frameBoxShdCssVal': 'none',
  // 'ec-brdRad': '0',
  'ec-frm-edTabBrdRad': '0',
  'ec-frm-edTabBarBrdCol':
    'color-mix(in srgb, var(--theme-foreground), 10%, transparent)',
  'ec-brdCol': 'color-mix(in srgb, var(--theme-foreground), 10%, transparent)',
}

let themeMode = siteConfig.themeMode
if (siteConfig.themes.length < 1) {
  throw new Error('No themes defined in site.config. Please add at least one theme.')
}
if (themeMode === 'light-dark-auto' && siteConfig.themes.length < 2) {
  console.warn(
    'Theme mode "dark-light-auto" requires at least two themes. Defaulting to "single".',
  )
  themeMode = 'single'
}
let defaultTheme = siteConfig.themeDefault || siteConfig.themes[0]
let lightTheme = themeMode === 'light-dark-auto' ? siteConfig.themes[0] : undefined
let darkTheme = themeMode === 'light-dark-auto' ? siteConfig.themes[1] : undefined

let resolvedThemes: { [key: string]: { [key: string]: string } } = {}
for (const theme of siteConfig.themes) {
  const loadedTheme = await loadShikiTheme(theme)
  resolvedThemes[theme] = resolveElementStyles(
    loadedTheme,
    {}, // Pass an empty object to use default styles
  )
}

let cssLines: string[] = []
for (const [themeId, themeStyles] of Object.entries(resolvedThemes)) {
  cssLines.push(`:root[data-theme="${themeId}"] {`)
  for (const [key, value] of Object.entries(themeStyles)) {
    cssLines.push(`--theme-${key}: ${value};`)
  }
  cssLines.push(`}`)
}
let generatedCss: string = cssLines.join('\n')
---

<!doctype html>
<html
  lang="en"
  data-theme={defaultTheme}
  data-default-theme={defaultTheme}
  data-dark-theme={darkTheme}
  data-light-theme={lightTheme}
  data-theme-mode={themeMode}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <title>{pageTitle}</title>
    <style is:global define:vars={baseCssVars}></style>
    <style is:inline set:html={generatedCss}></style>
    {themeMode === 'light-dark-auto' && <LightDarkAutoThemeLoader />}
    {themeMode === 'select' && <SelectThemeLoader />}
  </head>
  <body class="w-full h-full m-0 bg-background text-foreground">
    <div
      class="flex flex-col max-w-[812px] min-h-screen border-accent/10 m-auto py-5 px-4 sm:px-6 md:p-10"
    >
      <Header />
      <div class="flex flex-col">
        <slot />
      </div>
      <Footer />
    </div>
  </body>
</html>
